generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model User { 
  id        String   @id @default(uuid()) 
  email     String   @unique 
  password  String 
  name      String 
  city      String 
  createdAt DateTime @default(now()) 
  pets      Pet[] 
  matchesA  Match[]  @relation("UserMatchesA")
  matchesB  Match[]  @relation("UserMatchesB")
}

model Pet { 
  id           String   @id @default(uuid()) 
  name         String 
  breed        String 
  age          Int 
  gender       String // "M" ou "F" 
  size         String // "pequeno", "médio", "grande" 
  isNeutered   Boolean 
  objective    String // "amizade", "cruzamento", "adoção" 
  description  String? 
  photoUrl     String 
  ownerId      String 
  owner        User     @relation(fields: [ownerId], references: [id]) 
  likes        Like[]   @relation("PetLikes") 
  likedBy      Like[]   @relation("PetLikedBy") 
  createdAt    DateTime @default(now()) 
  matchesA     Match[]  @relation("MatchPetA")
  matchesB     Match[]  @relation("MatchPetB")
} 

model Like { 
  id         String   @id @default(uuid()) 
  fromPetId  String 
  toPetId    String 
  fromPet    Pet      @relation("PetLikes", fields: [fromPetId], references: [id]) 
  toPet      Pet      @relation("PetLikedBy", fields: [toPetId], references: [id]) 
  createdAt  DateTime @default(now()) 
} 

model Match { 
  id        String   @id @default(uuid()) 
  petAId    String
  petBId    String
  petA      Pet      @relation("MatchPetA", fields: [petAId], references: [id]) 
  petB      Pet      @relation("MatchPetB", fields: [petBId], references: [id]) 
  userAId   String
  userBId   String
  userA     User     @relation("UserMatchesA", fields: [userAId], references: [id])
  userB     User     @relation("UserMatchesB", fields: [userBId], references: [id])
  createdAt DateTime @default(now()) 
  chat      Chat? 
} 

model Chat { 
  id        String   @id @default(uuid()) 
  matchId   String   @unique 
  messages  Message[] 
  match     Match    @relation(fields: [matchId], references: [id]) 
} 

model Message { 
  id        String   @id @default(uuid()) 
  chatId    String 
  senderId  String 
  content   String 
  createdAt DateTime @default(now()) 
  chat      Chat     @relation(fields: [chatId], references: [id]) 
}