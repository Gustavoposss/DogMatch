import prisma from '../prismaClient';

/**
 * Script para limpar TODOS os dados do banco de dados
 * ‚ö†Ô∏è ATEN√á√ÉO: Este script apaga TODOS os dados permanentemente!
 * Use apenas em desenvolvimento ou antes de ir para produ√ß√£o
 */
async function clearDatabase() {
  try {
    console.log('üßπ Iniciando limpeza do banco de dados...\n');

    // A ordem √© importante por causa das foreign keys
    // Deletar na ordem inversa das depend√™ncias

    console.log('üóëÔ∏è  Deletando mensagens...');
    const messages = await prisma.message.deleteMany({});
    console.log(`   ‚úÖ ${messages.count} mensagens deletadas`);

    console.log('üóëÔ∏è  Deletando chats...');
    const chats = await prisma.chat.deleteMany({});
    console.log(`   ‚úÖ ${chats.count} chats deletados`);

    console.log('üóëÔ∏è  Deletando matches...');
    const matches = await prisma.match.deleteMany({});
    console.log(`   ‚úÖ ${matches.count} matches deletados`);

    console.log('üóëÔ∏è  Deletando likes...');
    const likes = await prisma.like.deleteMany({});
    console.log(`   ‚úÖ ${likes.count} likes deletados`);

    console.log('üóëÔ∏è  Deletando boosts...');
    const boosts = await prisma.boost.deleteMany({});
    console.log(`   ‚úÖ ${boosts.count} boosts deletados`);

    console.log('üóëÔ∏è  Deletando pagamentos...');
    const payments = await prisma.payment.deleteMany({});
    console.log(`   ‚úÖ ${payments.count} pagamentos deletados`);

    console.log('üóëÔ∏è  Deletando limites de uso...');
    const usageLimits = await prisma.usageLimit.deleteMany({});
    console.log(`   ‚úÖ ${usageLimits.count} limites de uso deletados`);

    console.log('üóëÔ∏è  Deletando assinaturas...');
    const subscriptions = await prisma.subscription.deleteMany({});
    console.log(`   ‚úÖ ${subscriptions.count} assinaturas deletadas`);

    console.log('üóëÔ∏è  Deletando pets...');
    const pets = await prisma.pet.deleteMany({});
    console.log(`   ‚úÖ ${pets.count} pets deletados`);

    console.log('üóëÔ∏è  Deletando usu√°rios...');
    const users = await prisma.user.deleteMany({});
    console.log(`   ‚úÖ ${users.count} usu√°rios deletados`);

    console.log('\n‚ú® Banco de dados limpo com sucesso!');
    console.log('üìä Resumo:');
    console.log(`   - ${users.count} usu√°rios`);
    console.log(`   - ${pets.count} pets`);
    console.log(`   - ${subscriptions.count} assinaturas`);
    console.log(`   - ${usageLimits.count} limites de uso`);
    console.log(`   - ${payments.count} pagamentos`);
    console.log(`   - ${boosts.count} boosts`);
    console.log(`   - ${likes.count} likes`);
    console.log(`   - ${matches.count} matches`);
    console.log(`   - ${chats.count} chats`);
    console.log(`   - ${messages.count} mensagens`);

  } catch (error) {
    console.error('‚ùå Erro ao limpar banco de dados:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a DELETAR TODOS os dados do banco!');
  console.log('‚ö†Ô∏è  Esta a√ß√£o √© IRREVERS√çVEL!\n');
  
  // Executar ap√≥s 3 segundos para dar tempo de cancelar (Ctrl+C)
  setTimeout(() => {
    clearDatabase()
      .then(() => {
        console.log('\n‚úÖ Processo conclu√≠do!');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\n‚ùå Erro:', error);
        process.exit(1);
      });
  }, 3000);
  
  console.log('‚è≥ Aguardando 3 segundos... (Pressione Ctrl+C para cancelar)\n');
}

export default clearDatabase;

